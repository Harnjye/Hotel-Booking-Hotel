let mongoose,bcrypt;_48a‍.x([["default",()=>_48a‍.o]]);_48a‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_48a‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);

const {Schema} = mongoose;

const userSchema = new Schema({
  name: {
    type: String,
    trim: true,
    required: "Name is required",
  },
  email: {
    type: String,
    trim: true,
    required: "Email is required",
    unique: true,
  },
  password: {
    type: String,
    required: true,
    min: 6,
    max: 20,
  },
  stripe_account_id: "",
  stripe_seller: {},
  stripeSession: {}
  },
  {timestamps: true}
);

userSchema.pre("save", function(next) {
  let user = this;

  if(user.isModified("password")) {
    return bcrypt.hash(user.password, 12, function (err, hash) {
      if(err) {
        _48a‍.g.console.log("BCRYPT HASH ERR", err);
        return next(err);
      }
      user.password = hash;
      return next();
    })
  } else {
    return next();
  }
});

userSchema.methods.comparePassword = function (password, next) {
  bcrypt.compare(password, this.password, function(err, match) {
    if(err) {
      _48a‍.g.console.log("COMPARE PASSWORD ERR", err)
      return next(err, false);
    }
    // if no err, we get null
    _48a‍.g.console.log("MATCH PASSWORD", match)
    return next(null, match); // true
  });
};

_48a‍.d(mongoose.model("User", userSchema));